name: Continuous Integration - iburguer-onboarding

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
jobs:
  OnBoarding-Tests:
    runs-on: ubuntu-latest
    environment: 
      name: Iburguer

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Restore Dependencies
      run: dotnet restore iBurguer.Onboarding/src/iBurguer.Onboarding.SignIn

    - name: Build Application
      run: dotnet build  iBurguer.Onboarding/src/iBurguer.Onboarding.SignIn --no-restore --configuration Release
    
    - name: Run Tests
      run: dotnet test iBurguer.Onboarding/test/iBurguer.Onboarding.Tests
      
    - name: install Coverlet
      run: |
        dotnet tool install --global coverlet.console
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"FIAP-G04_iburguer-onboarding" /o:"fiap-g04" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="coverage.xml"
        dotnet build --no-incremental
        coverlet .\iBurguer.Onboarding\test\iBurguer.Onboarding.Tests\bin\Debug\net8.0\iBurguer.Onboarding.Tests.dll --target "dotnet" --targetargs "test --no-build" --mergeoutput -f=opencover -o="coverage.xml"
        coverlet .\iBurguer.Onboarding\test\iBurguer.Onboarding.SignIn.Tests\bin\Debug\net8.0\iBurguer.Onboarding.SignIn.Tests.dll --target "dotnet" --targetargs "test --no-build" --mergeoutput -f=opencover -o="coverage.xml"
        coverlet .\iBurguer.Onboarding\test\iBurguer.Onboarding.SignUp.Tests\bin\Debug\net8.0\iBurguer.Onboarding.SignUp.Tests.dll --target "dotnet" --targetargs "test --no-build" --mergeoutput -f=opencover -o="coverage.xml"
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  OnBoarding-SingIn-Deploy:
    needs: OnBoarding-Tests
    runs-on: ubuntu-latest
    environment: 
      name: Iburguer

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install Amazon.Lambda.Tools
      run: dotnet tool install -g Amazon.Lambda.Tools
    
    - name: Deploy function to AWS Lambda
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: cd iBurguer.Onboarding/src/iBurguer.Onboarding.SignIn && dotnet lambda deploy-function iburguer-lambda-signin --region $AWS_REGION

  OnBoarding-SignUp-Deploy:
    needs: OnBoarding-Tests
    runs-on: ubuntu-latest
    environment: 
      name: Iburguer

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install Amazon.Lambda.Tools
      run: dotnet tool install -g Amazon.Lambda.Tools
    
    - name: Deploy function to AWS Lambda
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: cd iBurguer.Onboarding/src/iBurguer.Onboarding.SignUp && dotnet lambda deploy-function iburguer-lambda-signup --region $AWS_REGION
      