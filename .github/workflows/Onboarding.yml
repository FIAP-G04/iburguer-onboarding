name: Continuous Integration - iburguer-onboarding

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
jobs:
  OnBoarding-Tests:
    runs-on: ubuntu-latest
    environment: 
      name: Iburguer

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Restore Dependencies
      run: dotnet restore iBurguer.Onboarding/src/iBurguer.Onboarding.SignIn

    - name: Build Application
      run: dotnet build  iBurguer.Onboarding/src/iBurguer.Onboarding.SignIn --no-restore --configuration Release
    
    - name: Run Tests
      run: dotnet test iBurguer.Onboarding/test/iBurguer.Onboarding.Tests
      
  OnBoarding-SingIn-Deploy:
    needs: OnBoarding-Tests
    runs-on: ubuntu-latest
    environment: 
      name: Iburguer

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install Amazon.Lambda.Tools
      run: dotnet tool install -g Amazon.Lambda.Tools
    
    - name: Deploy function to AWS Lambda
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: cd iBurguer.Onboarding/src/iBurguer.Onboarding.SignIn && dotnet lambda deploy-function iburguer-lambda-signin --region $AWS_REGION

  OnBoarding-SignUp-Deploy:
    needs: OnBoarding-Tests
    runs-on: ubuntu-latest
    environment: 
      name: Iburguer

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install Amazon.Lambda.Tools
      run: dotnet tool install -g Amazon.Lambda.Tools
    
    - name: Deploy function to AWS Lambda
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
      run: cd iBurguer.Onboarding/src/iBurguer.Onboarding.SignUp && dotnet lambda deploy-function iburguer-lambda-signup --region $AWS_REGION
      